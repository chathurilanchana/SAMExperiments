using Amazon.DynamoDBv2.Model;
using Amazon.EventBridge;
using Amazon.EventBridge.Model;
using Amazon.Lambda.Core;
using Amazon.Lambda.DynamoDBEvents;
using AutoGenerated;
using System.Text.Json;

// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]

namespace Stream;

public class DynamoDBStreamToEventBridgeForwarder
{

    /// <summary>
    /// A simple function that takes a string and does a ToUpper
    /// </summary>
    /// <param name="input"></param>
    /// <param name="context"></param>
    /// <returns></returns>
    public async Task<string> FunctionHandler(DynamoDBEvent dynamoDbEvent, ILambdaContext context)
    {
        Console.WriteLine($"Beginning to process {dynamoDbEvent.Records.Count} records...");

        var events = new List<PutEventsRequestEntry>();

        foreach (var record in dynamoDbEvent.Records)
        {
            Console.WriteLine($"Event ID: {record.EventID}");
            Console.WriteLine($"Event Name: {record.EventName}");

            if (record.EventName == "INSERT")
            {
                var attributeMap = record.Dynamodb.NewImage; // get new updated values
                if (attributeMap.ContainsKey("status")) // Lets use record type column to distinguish different records instead of this way
                {
                    Console.WriteLine("an order event");
                    var orderCreated = GetOrderCreatedEvent(attributeMap);
                    events.Add(orderCreated);
                }
                else if (attributeMap.ContainsKey("Type"))
                {
                    Console.WriteLine("an order line event");
                    var itemAdded = GetOrderLineAddedEvent(attributeMap);
                    events.Add(itemAdded);
                }
                else
                {
                    Console.WriteLine("we received an unexpected event");
                }
            }
        }

        var eventBridgeClient = new AmazonEventBridgeClient();
        var putEventRequest = new PutEventsRequest
        {
            Entries = events
        };
        var response = await eventBridgeClient.PutEventsAsync(putEventRequest);

        // send failed entries to sqs, and then to sns topic
        Console.WriteLine($"Stream processing complete, status code {response.HttpStatusCode}. Failed entry count {response.FailedEntryCount}");

        //todo: If failed count > 0 retry couple of times

        Console.WriteLine(response);

        return "ok";
    }

    private PutEventsRequestEntry GetOrderCreatedEvent(Dictionary<string, AttributeValue> attributeMap)
    {
        return new PutEventsRequestEntry
        {
            Source = "order",
            DetailType = "created",
            Time = DateTime.Now,
            EventBusName = "OrdersEventBus",
            Detail = JsonSerializer.Serialize(
                new
                {
                    CustomerId = attributeMap["CustomerId"].S,
                    OrderId = attributeMap["Id"].S,
                    CorelationId = Guid.NewGuid().ToString()
                })
        };
    }

    private PutEventsRequestEntry GetOrderLineAddedEvent(Dictionary<string, AttributeValue> attributeMap)
    {
        return new PutEventsRequestEntry
        {
            Source = "order",
            DetailType = "item-added",
            Time = DateTime.Now,
            EventBusName = "OrdersEventBus",
            Detail = JsonSerializer.Serialize(
                new ItemAdded
                {
                    OrderId = attributeMap["Id"].S,
                    CorelationId = Guid.NewGuid().ToString(),
                    OrderLine = 
                        new OrderLine
                        {
                            Amount = Convert.ToDouble(attributeMap["Amount"].N),
                            Id = attributeMap["Id"].S,
                            Type = attributeMap["Type"].S,
                        }                    
                })
        };
    }
}
